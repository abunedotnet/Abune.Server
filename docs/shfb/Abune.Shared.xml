<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Abune.Shared</name>
    </assembly>
    <members>
        <member name="T:Abune.Shared.Command.BaseCommand">
            <summary>
            Base class for all commands.
            </summary>
        </member>
        <member name="M:Abune.Shared.Command.BaseCommand.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Abune.Shared.Command.BaseCommand"/> class.
            </summary>
            <param name="buffer">Buffer containing the serialized command.</param>
        </member>
        <member name="M:Abune.Shared.Command.BaseCommand.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Abune.Shared.Command.BaseCommand"/> class.
            </summary>
            <param name="br">Binary reader on the buffer containing payload.</param>
        </member>
        <member name="M:Abune.Shared.Command.BaseCommand.#ctor(Abune.Shared.Command.CommandType)">
            <summary>
            Initializes a new instance of the <see cref="T:Abune.Shared.Command.BaseCommand"/> class.
            </summary>
            <param name="type">Type of command.</param>
        </member>
        <member name="M:Abune.Shared.Command.BaseCommand.#ctor(System.Byte,Abune.Shared.Command.CommandType,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Abune.Shared.Command.BaseCommand"/> class.
            </summary>
            <param name="priority">Command priority.</param>
            <param name="type">Command type.</param>
            <param name="commandBody">Body payload of command.</param>
        </member>
        <member name="P:Abune.Shared.Command.BaseCommand.Priority">
            <summary>
            Gets the command priority.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.BaseCommand.Type">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.BaseCommand.Body">
            <summary>
            Gets or sets the command payload.
            </summary>
        </member>
        <member name="M:Abune.Shared.Command.BaseCommand.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns>Serialized instance.</returns>
        </member>
        <member name="M:Abune.Shared.Command.BaseCommand.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes this instance into a binary writer.
            </summary>
            <param name="bw">Binary write to serialize to.</param>
        </member>
        <member name="M:Abune.Shared.Command.BaseCommand.ReadVector3(System.IO.BinaryReader)">
            <summary>
            Reads a vector 3 instance.
            </summary>
            <param name="reader">Binary reader on byte buffer.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:Abune.Shared.Command.BaseCommand.ReadQuaternion(System.IO.BinaryReader)">
            <summary>
            Reads a quaternion instance.
            </summary>
            <param name="reader">Binary reader on byte buffer.</param>
            <returns>Quaternion.</returns>
        </member>
        <member name="M:Abune.Shared.Command.BaseCommand.Write(System.IO.BinaryWriter,Abune.Shared.DataType.AVector3)">
            <summary>
            Writes a vector 3 instance.
            </summary>
            <param name="writer">Binary write to byte buffer.</param>
            <param name="vector">Vector to write.</param>
        </member>
        <member name="M:Abune.Shared.Command.BaseCommand.Write(System.IO.BinaryWriter,Abune.Shared.DataType.AQuaternion)">
            <summary>
            Writes a vector 3 instance.
            </summary>
            <param name="bw">Binary write to byte buffer.</param>
            <param name="quaternion">Quaternion to write.</param>
        </member>
        <member name="M:Abune.Shared.Command.BaseCommand.Deserialize(System.Byte[])">
            <summary>
            Deserializes the buffer into this instance.
            </summary>
            <param name="buffer">Byte buffer.</param>
        </member>
        <member name="M:Abune.Shared.Command.BaseCommand.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes the binary reader into this instance.
            </summary>
            <param name="br">Binary reader on byte buffer.</param>
        </member>
        <member name="T:Abune.Shared.Command.CommandType">
            <summary>
            Different command types.
            </summary>
        </member>
        <member name="F:Abune.Shared.Command.CommandType.ObjectUpdatePosition">
            <summary>
            Updates object position.
            </summary>
        </member>
        <member name="F:Abune.Shared.Command.CommandType.ObjectCreate">
            <summary>
            Creates an object.
            </summary>
        </member>
        <member name="F:Abune.Shared.Command.CommandType.ObjectDestroy">
            <summary>
            Destroys an object.
            </summary>
        </member>
        <member name="F:Abune.Shared.Command.CommandType.SubscribeArea">
            <summary>
            Subscribes client to an area.
            </summary>
        </member>
        <member name="F:Abune.Shared.Command.CommandType.UnsubscribeArea">
            <summary>
            Unsubscribes client from an area.
            </summary>
        </member>
        <member name="F:Abune.Shared.Command.CommandType.ObjectLock">
            <summary>
            Requests to lock an object.
            </summary>
        </member>
        <member name="F:Abune.Shared.Command.CommandType.ObjectUnlock">
            <summary>
            Requests to unlock an object.
            </summary>
        </member>
        <member name="F:Abune.Shared.Command.CommandType.ObjectValueUpdate">
            <summary>
            Updates or creates an object value.
            </summary>
        </member>
        <member name="F:Abune.Shared.Command.CommandType.ObjectValueRemove">
            <summary>
            Deletes an object value.
            </summary>
        </member>
        <member name="F:Abune.Shared.Command.CommandType.EventPoint">
            <summary>
            Event at a point.
            </summary>
        </member>
        <member name="F:Abune.Shared.Command.CommandType.EventLine">
            <summary>
            Event with start and end.
            </summary>
        </member>
        <member name="T:Abune.Shared.Command.Contract.IAreaCommand">
            <summary>
            Interface for area commands.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.Contract.IAreaCommand.AreaId">
            <summary>
            Gets the area identifier.
            </summary>
            <value>
            The area identifier.
            </value>
        </member>
        <member name="T:Abune.Shared.Command.Contract.ICanAccelerate">
            <summary>
            Interface for things that could accelerate.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.Contract.ICanAccelerate.Velocity">
            <summary>
            Gets the velocity in units per second.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.Contract.ICanAccelerate.AngularVelocity">
            <summary>
            Gets the angular velocity in radiants per second.
            </summary>
        </member>
        <member name="T:Abune.Shared.Command.Contract.ICanLocate">
            <summary>
            Interface for things that can be located.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.Contract.ICanLocate.WorldPosition">
            <summary>
            Gets the world position.
            </summary>
        </member>
        <member name="T:Abune.Shared.Command.Contract.ICanRotate">
            <summary>Implementation can rotate (Quaternion).</summary>
        </member>
        <member name="P:Abune.Shared.Command.Contract.ICanRotate.Orientation">
            <summary>Gets the orientation.</summary>
            <value>The orientation.</value>
        </member>
        <member name="T:Abune.Shared.Command.Contract.IObjectCommand">
            <summary>
            Interface for object commands.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.Contract.IObjectCommand.ObjectId">
            <summary>
            Gets the object identifier.
            </summary>
            <value>
            The object identifier.
            </value>
        </member>
        <member name="T:Abune.Shared.Command.EventLineCommand">
            <summary>Linear event command.</summary>
            <remarks>F.e. used for shooting events.</remarks>
        </member>
        <member name="M:Abune.Shared.Command.EventLineCommand.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.EventLineCommand" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Command.EventLineCommand.#ctor(Abune.Shared.Command.BaseCommand)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.EventLineCommand" /> class.</summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">Command is null.</exception>
            <exception cref="T:System.NotSupportedException">Type {command.Type} not supported.</exception>
        </member>
        <member name="M:Abune.Shared.Command.EventLineCommand.#ctor(System.UInt16,Abune.Shared.DataType.AVector3,Abune.Shared.DataType.AVector3,System.UInt64,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.EventLineCommand" /> class.</summary>
            <param name="eventType">The event type.</param>
            <param name="startPosition">The start position.</param>
            <param name="endPosition">The end position.</param>
            <param name="frameTick">The frame tick.</param>
            <param name="data">The data.</param>
            <exception cref="T:System.ArgumentNullException">Data is null.</exception>
        </member>
        <member name="P:Abune.Shared.Command.EventLineCommand.EventType">
            <summary>Gets or sets the event type.</summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.EventLineCommand.FrameTick">
            <summary>Gets or sets the frame tick.</summary>
            <value>The frame tick when the event occured/will occur.</value>
        </member>
        <member name="P:Abune.Shared.Command.EventLineCommand.StartPosition">
            <summary>
            Gets or sets position where the event starts.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.EventLineCommand.EndPosition">
            <summary>
            Gets or sets position where the event ends.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.EventLineCommand.Data">
            <summary>Gets or sets the data.</summary>
            <value>The data.</value>
        </member>
        <member name="P:Abune.Shared.Command.EventLineCommand.Abune#Shared#Command#Contract#ICanLocate#WorldPosition">
            <summary>
            Gets position where object is located.
            </summary>
        </member>
        <member name="T:Abune.Shared.Command.EventPointCommand">
            <summary>Update value of object command.</summary>
        </member>
        <member name="M:Abune.Shared.Command.EventPointCommand.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.EventPointCommand" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Command.EventPointCommand.#ctor(Abune.Shared.Command.BaseCommand)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.EventPointCommand" /> class.</summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">Command is null.</exception>
            <exception cref="T:System.NotSupportedException">Type {command.Type} not supported.</exception>
        </member>
        <member name="M:Abune.Shared.Command.EventPointCommand.#ctor(System.UInt16,Abune.Shared.DataType.AVector3,System.UInt64,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.EventPointCommand" /> class.</summary>
            <param name="eventType">The event type.</param>
            <param name="targetPosition">The target position.</param>
            <param name="frameTick">The frame tick.</param>
            <param name="data">The data.</param>
            <exception cref="T:System.ArgumentNullException">Data is null.</exception>
        </member>
        <member name="P:Abune.Shared.Command.EventPointCommand.EventType">
            <summary>Gets or sets the event type.</summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.EventPointCommand.FrameTick">
            <summary>Gets or sets the frame tick.</summary>
            <value>The frame tick when the event occured/will occur.</value>
        </member>
        <member name="P:Abune.Shared.Command.EventPointCommand.TargetPosition">
            <summary>
            Gets or sets position where object is located.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.EventPointCommand.Data">
            <summary>Gets or sets the data.</summary>
            <value>The data.</value>
        </member>
        <member name="P:Abune.Shared.Command.EventPointCommand.Abune#Shared#Command#Contract#ICanLocate#WorldPosition">
            <summary>
            Gets position where object is located.
            </summary>
        </member>
        <member name="T:Abune.Shared.Command.ObjectCreateCommand">
            <summary>
            Object create command.
            </summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectCreateCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectCreateCommand"/> class.
            </summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectCreateCommand.#ctor(Abune.Shared.Command.BaseCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectCreateCommand"/> class.
            </summary>
            <param name="command">Unextracted base command.</param>
        </member>
        <member name="M:Abune.Shared.Command.ObjectCreateCommand.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.UInt32,Abune.Shared.DataType.AVector3,Abune.Shared.DataType.AQuaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectCreateCommand"/> class.
            </summary>
            <param name="frameTick">Frame tick when the object was created.</param>
            <param name="objectId">Id of the new object.</param>
            <param name="parentObjectId">Id of the objects parent.</param>
            <param name="ownerId">Id of the owner.</param>
            <param name="typeId">Type of the object.</param>
            <param name="targetPosition">Position where object is located.</param>
            <param name="targetOrientation">Quaternion orientation of object.</param>
        </member>
        <member name="P:Abune.Shared.Command.ObjectCreateCommand.FrameTick">
            <summary>
            Gets or sets frame tick when the object was created.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.ObjectCreateCommand.ObjectId">
            <summary>
            Gets or sets id of the new object.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.ObjectCreateCommand.ParentObjectId">
            <summary>
            Gets or sets id of the objects parent.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.ObjectCreateCommand.OwnerId">
            <summary>
            Gets or sets id of the owner.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.ObjectCreateCommand.TypeId">
            <summary>
            Gets or sets type of the object.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.ObjectCreateCommand.TargetPosition">
            <summary>
            Gets or sets position where object is located.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.ObjectCreateCommand.TargetOrientation">
            <summary>
            Gets or sets quaternion orientation of object.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.ObjectCreateCommand.Abune#Shared#Command#Contract#ICanLocate#WorldPosition">
            <summary>
            Gets position where object is located.
            </summary>
        </member>
        <member name="P:Abune.Shared.Command.ObjectCreateCommand.Abune#Shared#Command#Contract#ICanRotate#Orientation">
            <summary>
            Gets quaternion direction w axis of object.
            </summary>
        </member>
        <member name="T:Abune.Shared.Command.ObjectDestroyCommand">
            <summary>
            Command class for object destruction.
            </summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectDestroyCommand.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectDestroyCommand" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectDestroyCommand.#ctor(Abune.Shared.Command.BaseCommand)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectDestroyCommand" /> class.</summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">Command argument.</exception>
            <exception cref="T:System.NotSupportedException">Type {command.Type} not supported.</exception>
        </member>
        <member name="M:Abune.Shared.Command.ObjectDestroyCommand.#ctor(System.UInt64,System.UInt64,Abune.Shared.DataType.AVector3)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectDestroyCommand" /> class.</summary>
            <param name="frameTick">The frame tick.</param>
            <param name="objectId">The object identifier.</param>
            <param name="targetPosition">The target position.</param>
        </member>
        <member name="P:Abune.Shared.Command.ObjectDestroyCommand.FrameTick">
            <summary>Gets or sets the frame tick.</summary>
            <value>The frame tick.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectDestroyCommand.ObjectId">
            <summary>Gets or sets the object identifier.</summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectDestroyCommand.TargetPosition">
            <summary>Gets or sets the target position x.</summary>
            <value>The target position x.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectDestroyCommand.WorldPosition">
            <summary>Gets the world position x axis.</summary>
        </member>
        <member name="T:Abune.Shared.Command.ObjectLockCommand">
            <summary>Command to lock objects.</summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectLockCommand.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectLockCommand" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectLockCommand.#ctor(Abune.Shared.Command.BaseCommand)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectLockCommand" /> class.</summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">Command is null.</exception>
            <exception cref="T:System.NotSupportedException">Type {command.Type} not supported.</exception>
        </member>
        <member name="M:Abune.Shared.Command.ObjectLockCommand.#ctor(System.UInt64,System.UInt32,System.TimeSpan)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectLockCommand" /> class.</summary>
            <param name="objectId">The object identifier.</param>
            <param name="lockOwnerId">The lock owner identifier.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="P:Abune.Shared.Command.ObjectLockCommand.ObjectId">
            <summary>
            Gets or sets the object identifier.
            </summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectLockCommand.LockOwnerId">
            <summary>Gets or sets the lock owner identifier.</summary>
            <value>The lock owner identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectLockCommand.Timeout">
            <summary>Gets or sets the timeout.</summary>
            <value>The timeout.</value>
        </member>
        <member name="T:Abune.Shared.Command.ObjectUnlockCommand">
            <summary>Unlock an object.</summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectUnlockCommand.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectUnlockCommand" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectUnlockCommand.#ctor(Abune.Shared.Command.BaseCommand)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectUnlockCommand" /> class.</summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">Command is null.</exception>
            <exception cref="T:System.NotSupportedException">Type {command.Type} not supported.</exception>
        </member>
        <member name="M:Abune.Shared.Command.ObjectUnlockCommand.#ctor(System.UInt64,System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectUnlockCommand" /> class.</summary>
            <param name="objectId">The object identifier.</param>
            <param name="lockOwnerId">The lock owner identifier.</param>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUnlockCommand.ObjectId">
            <summary>Gets or sets the object identifier.</summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUnlockCommand.LockOwnerId">
            <summary>Gets or sets the lock owner identifier.</summary>
            <value>The lock owner identifier.</value>
        </member>
        <member name="T:Abune.Shared.Command.ObjectUpdatePositionCommand">
            <summary>Update object position.</summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectUpdatePositionCommand.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectUpdatePositionCommand" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectUpdatePositionCommand.#ctor(Abune.Shared.Command.BaseCommand)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectUpdatePositionCommand" /> class.</summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">Command is null.</exception>
            <exception cref="T:System.NotSupportedException">Type {command.Type} not supported.</exception>
        </member>
        <member name="M:Abune.Shared.Command.ObjectUpdatePositionCommand.#ctor(System.UInt64,Abune.Shared.DataType.AVector3,Abune.Shared.DataType.AQuaternion,System.UInt64,System.UInt64)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectUpdatePositionCommand" /> class.</summary>
            <param name="objectId">The object identifier.</param>
            <param name="targetPosition">The target position x.</param>
            <param name="targetOrientation">The quaternion .</param>
            <param name="startFrameTick">The start frame tick.</param>
            <param name="stopFrameTick">The stop frame tick.</param>
        </member>
        <member name="M:Abune.Shared.Command.ObjectUpdatePositionCommand.#ctor(System.UInt64,Abune.Shared.DataType.AVector3,Abune.Shared.DataType.AQuaternion,Abune.Shared.DataType.AVector3,Abune.Shared.DataType.AVector3,System.UInt64,System.UInt64)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectUpdatePositionCommand" /> class.</summary>
            <param name="objectId">The object identifier.</param>
            <param name="targetPosition">The target position.</param>
            <param name="targetOrientation">The quaternion.</param>
            <param name="velocity">The velocity.</param>
            <param name="angularVelocity">The angular velocity.</param>
            <param name="startFrameTick">The start frame tick.</param>
            <param name="stopFrameTick">The stop frame tick.</param>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUpdatePositionCommand.ObjectId">
            <summary>Gets or sets the object identifier.</summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUpdatePositionCommand.TargetPosition">
            <summary>Gets or sets the target position.</summary>
            <value>The target position.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUpdatePositionCommand.TargetOrientation">
            <summary>Gets or sets the quaternion.</summary>
            <value>The quaternion.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUpdatePositionCommand.Velocity">
            <summary>Gets or sets the velocity.</summary>
            <value>The velocity.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUpdatePositionCommand.AngularVelocity">
            <summary>Gets or sets the angular velocity.</summary>
            <value>The angular velocity.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUpdatePositionCommand.StartFrameTick">
            <summary>Gets or sets the start frame tick.</summary>
            <value>The start frame tick.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUpdatePositionCommand.StopFrameTick">
            <summary>Gets or sets the stop frame tick.</summary>
            <value>The stop frame tick.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUpdatePositionCommand.Abune#Shared#Command#Contract#ICanLocate#WorldPosition">
            <summary>Gets the world position.</summary>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUpdatePositionCommand.Abune#Shared#Command#Contract#ICanRotate#Orientation">
            <summary>Gets the rotation.</summary>
            <value>The rotation.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUpdatePositionCommand.Abune#Shared#Command#Contract#ICanAccelerate#Velocity">
            <summary>Gets the velocity in units per second.</summary>
        </member>
        <member name="P:Abune.Shared.Command.ObjectUpdatePositionCommand.Abune#Shared#Command#Contract#ICanAccelerate#AngularVelocity">
            <summary>Gets the angular velocity radiants per second.</summary>
        </member>
        <member name="T:Abune.Shared.Command.ObjectValueRemoveCommand">
            <summary>Remove value from object command.</summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectValueRemoveCommand.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectValueRemoveCommand" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectValueRemoveCommand.#ctor(Abune.Shared.Command.BaseCommand)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectValueRemoveCommand" /> class.</summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">Command is null.</exception>
            <exception cref="T:System.NotSupportedException">Type {command.Type} not supported.</exception>
        </member>
        <member name="M:Abune.Shared.Command.ObjectValueRemoveCommand.#ctor(System.UInt64,System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectValueRemoveCommand" /> class.</summary>
            <param name="objectId">The object identifier.</param>
            <param name="valueId">The value identifier.</param>
        </member>
        <member name="P:Abune.Shared.Command.ObjectValueRemoveCommand.ObjectId">
            <summary>Gets or sets the object identifier.</summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectValueRemoveCommand.ValueId">
            <summary>Gets or sets the value identifier.</summary>
            <value>The value identifier.</value>
        </member>
        <member name="T:Abune.Shared.Command.ObjectValueUpdateCommand">
            <summary>Update value of object command.</summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectValueUpdateCommand.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectValueUpdateCommand" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Command.ObjectValueUpdateCommand.#ctor(Abune.Shared.Command.BaseCommand)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectValueUpdateCommand" /> class.</summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">Command is null.</exception>
            <exception cref="T:System.NotSupportedException">Type {command.Type} not supported.</exception>
        </member>
        <member name="M:Abune.Shared.Command.ObjectValueUpdateCommand.#ctor(System.UInt64,System.UInt32,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.ObjectValueUpdateCommand" /> class.</summary>
            <param name="objectId">The object identifier.</param>
            <param name="valueId">The value identifier.</param>
            <param name="data">The data.</param>
            <exception cref="T:System.ArgumentNullException">Data is null.</exception>
        </member>
        <member name="P:Abune.Shared.Command.ObjectValueUpdateCommand.ObjectId">
            <summary>Gets or sets the object identifier.</summary>
            <value>The object identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectValueUpdateCommand.ValueId">
            <summary>Gets or sets the value identifier.</summary>
            <value>The value identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.ObjectValueUpdateCommand.Data">
            <summary>Gets or sets the data.</summary>
            <value>The data.</value>
        </member>
        <member name="T:Abune.Shared.Command.SubscribeAreaCommand">
            <summary>Subscribe client to area command.</summary>
        </member>
        <member name="M:Abune.Shared.Command.SubscribeAreaCommand.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.SubscribeAreaCommand" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Command.SubscribeAreaCommand.#ctor(Abune.Shared.Command.BaseCommand)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.SubscribeAreaCommand" /> class.</summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">Command is null.</exception>
            <exception cref="T:System.NotSupportedException">Type {command.Type} not supported.</exception>
        </member>
        <member name="M:Abune.Shared.Command.SubscribeAreaCommand.#ctor(System.UInt32,System.UInt64,System.UInt16)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.SubscribeAreaCommand" /> class.</summary>
            <param name="clientId">The client identifier.</param>
            <param name="areaId">The area identifier.</param>
            <param name="messagePriority">The message priority.</param>
        </member>
        <member name="P:Abune.Shared.Command.SubscribeAreaCommand.ClientId">
            <summary>Gets the client identifier.</summary>
            <value>The client identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.SubscribeAreaCommand.AreaId">
            <summary>Gets the area identifier.</summary>
            <value>The area identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.SubscribeAreaCommand.MessagePriority">
            <summary>Gets the message priority.</summary>
            <value>The message priority.</value>
        </member>
        <member name="M:Abune.Shared.Command.SubscribeAreaCommand.ToString">
            <summary>Converts to string.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Abune.Shared.Command.UnsubscribeAreaCommand">
            <summary>Unsubscribe client from area command.</summary>
        </member>
        <member name="M:Abune.Shared.Command.UnsubscribeAreaCommand.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.UnsubscribeAreaCommand" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Command.UnsubscribeAreaCommand.#ctor(Abune.Shared.Command.BaseCommand)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.UnsubscribeAreaCommand" /> class.</summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">Command is null.</exception>
            <exception cref="T:System.NotSupportedException">Type {command.Type} not supported.</exception>
        </member>
        <member name="M:Abune.Shared.Command.UnsubscribeAreaCommand.#ctor(System.UInt32,System.UInt64)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Command.UnsubscribeAreaCommand" /> class.</summary>
            <param name="clientId">The client identifier.</param>
            <param name="areaId">The area identifier.</param>
        </member>
        <member name="P:Abune.Shared.Command.UnsubscribeAreaCommand.ClientId">
            <summary>Gets the client identifier.</summary>
            <value>The client identifier.</value>
        </member>
        <member name="P:Abune.Shared.Command.UnsubscribeAreaCommand.AreaId">
            <summary>Gets the area identifier.</summary>
            <value>The area identifier.</value>
        </member>
        <member name="T:Abune.Shared.Constants.Auth">
            <summary>
            Constants for authentication.
            </summary>
        </member>
        <member name="T:Abune.Shared.Constants.Auth.JwtClaims">
            <summary>
            Constants for jwt claims.
            </summary>
        </member>
        <member name="F:Abune.Shared.Constants.Auth.JwtClaims.AUTHENTICATIONCHALLENGE">
            <summary>
            The authentication challenge.
            </summary>
        </member>
        <member name="T:Abune.Shared.Constants.Version">
            <summary>
            Constants for version information.
            </summary>
        </member>
        <member name="F:Abune.Shared.Constants.Version.PROTOCOL">
            <summary>
            The protocol version.
            </summary>
        </member>
        <member name="T:Abune.Shared.DataType.AQuaternion">
            <summary>
            Class representing an orientation.
            </summary>
        </member>
        <member name="P:Abune.Shared.DataType.AQuaternion.Zero">
            <summary>
            Gets zero initialized quaternion.
            </summary>
        </member>
        <member name="P:Abune.Shared.DataType.AQuaternion.X">
            <summary>
            Gets or sets the X component of the Quaternion.
            </summary>
        </member>
        <member name="P:Abune.Shared.DataType.AQuaternion.Y">
            <summary>
            Gets or sets the Y component of the Quaternion.
            </summary>
        </member>
        <member name="P:Abune.Shared.DataType.AQuaternion.Z">
            <summary>
            Gets or sets the Z component of the Quaternion.
            </summary>
        </member>
        <member name="P:Abune.Shared.DataType.AQuaternion.W">
            <summary>
            Gets or sets the W component of the Quaternion.
            </summary>
        </member>
        <member name="M:Abune.Shared.DataType.AQuaternion.op_Equality(Abune.Shared.DataType.AQuaternion,Abune.Shared.DataType.AQuaternion)">
            <summary>
            Compares two quaternions.
            </summary>
            <param name="left">Left quaternion.</param>
            <param name="right">Right quaternion.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Abune.Shared.DataType.AQuaternion.op_Inequality(Abune.Shared.DataType.AQuaternion,Abune.Shared.DataType.AQuaternion)">
            <summary>
            Compares two quaternions.
            </summary>
            <param name="left">Left quaternion.</param>
            <param name="right">Right quaternion.</param>
            <returns>false if the specified object is equal to the current object; otherwise, true.</returns>
        </member>
        <member name="M:Abune.Shared.DataType.AQuaternion.Equals(Abune.Shared.DataType.AQuaternion)">
            <summary>
            Determines whether two object instances are equal.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Abune.Shared.DataType.AQuaternion.Equals(System.Object)">
            <summary>
            Determines whether two object instances are equal.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Abune.Shared.DataType.AQuaternion.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Abune.Shared.DataType.AQuaternion.ToString">
            <summary>
             Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Abune.Shared.DataType.AVector3">
            <summary>
            Struct representing a three dimensional vector.
            </summary>
        </member>
        <member name="P:Abune.Shared.DataType.AVector3.Zero">
            <summary>
            Gets zero initialized vector.
            </summary>
        </member>
        <member name="P:Abune.Shared.DataType.AVector3.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
        </member>
        <member name="P:Abune.Shared.DataType.AVector3.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
        </member>
        <member name="P:Abune.Shared.DataType.AVector3.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
        </member>
        <member name="M:Abune.Shared.DataType.AVector3.op_Equality(Abune.Shared.DataType.AVector3,Abune.Shared.DataType.AVector3)">
            <summary>
            Compares two vectors.
            </summary>
            <param name="left">Left vector.</param>
            <param name="right">Right vector.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Abune.Shared.DataType.AVector3.op_Inequality(Abune.Shared.DataType.AVector3,Abune.Shared.DataType.AVector3)">
            <summary>
            Compares two vectors.
            </summary>
            <param name="left">Left vector.</param>
            <param name="right">Right vector.</param>
            <returns>false if the specified object is equal to the current object; otherwise, true.</returns>
        </member>
        <member name="M:Abune.Shared.DataType.AVector3.ToString">
            <summary>
             Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Abune.Shared.DataType.AVector3.Equals(Abune.Shared.DataType.AVector3)">
            <summary>
            Determines whether two object instances are equal.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Abune.Shared.DataType.AVector3.Equals(System.Object)">
            <summary>
            Determines whether two object instances are equal.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Abune.Shared.DataType.AVector3.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Abune.Shared.Message.AreaCommandEnvelope">
            <summary>Envelope for area commands.</summary>
        </member>
        <member name="M:Abune.Shared.Message.AreaCommandEnvelope.#ctor(System.UInt64,Abune.Shared.Message.ObjectCommandEnvelope)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.AreaCommandEnvelope" /> class.</summary>
            <param name="toAreaId">To area identifier.</param>
            <param name="objectCommandEnvelope">The object command envelope.</param>
        </member>
        <member name="M:Abune.Shared.Message.AreaCommandEnvelope.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.AreaCommandEnvelope" /> class.</summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Abune.Shared.Message.AreaCommandEnvelope.ToAreaId">
            <summary>Gets the area identifier to route to.</summary>
            <value>Area identifier.</value>
        </member>
        <member name="P:Abune.Shared.Message.AreaCommandEnvelope.ObjectCommandEnvelope">
            <summary>Gets the object command envelope.</summary>
            <value>The object command envelope.</value>
        </member>
        <member name="P:Abune.Shared.Message.AreaCommandEnvelope.ToObjectId">
            <summary>  Gets the object identifier to route to.</summary>
            <value>Object identifier.</value>
        </member>
        <member name="T:Abune.Shared.Message.ClientAuthenticationResponse">
            <summary>Server authentication request.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ClientAuthenticationResponse.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ClientAuthenticationResponse" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ClientAuthenticationResponse.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ClientAuthenticationResponse" /> class.</summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:Abune.Shared.Message.ClientAuthenticationResponse.AuthenticationToken">
            <summary>Gets or sets the authentication token.</summary>
            <value>The authentication token.</value>
        </member>
        <member name="M:Abune.Shared.Message.ClientAuthenticationResponse.Serialize">
            <summary>Serializes this instance.</summary>
            <returns>Byte serialized instance.</returns>
        </member>
        <member name="T:Abune.Shared.Message.ClientHelloMessage">
            <summary>Client hello message.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ClientHelloMessage.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ClientHelloMessage" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ClientHelloMessage.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ClientHelloMessage" /> class.</summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:Abune.Shared.Message.ClientHelloMessage.ClientId">
            <summary>
             Gets or sets the client identifier.
            </summary>
            <value>The client identifier.</value>
        </member>
        <member name="P:Abune.Shared.Message.ClientHelloMessage.ClientPort">
            <summary>Gets or sets the client udp port.</summary>
            <value>The client port.</value>
        </member>
        <member name="P:Abune.Shared.Message.ClientHelloMessage.Message">
            <summary>Gets or sets the message.</summary>
            <value>The message.</value>
        </member>
        <member name="P:Abune.Shared.Message.ClientHelloMessage.Version">
            <summary>Gets or sets the client version.</summary>
            <value>The client version.</value>
        </member>
        <member name="M:Abune.Shared.Message.ClientHelloMessage.Serialize">
            <summary>Serializes this instance.</summary>
            <returns>Byte serialized instance.</returns>
        </member>
        <member name="T:Abune.Shared.Message.ClientPingMessage">
            <summary>Client ping request message.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ClientPingMessage.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ClientPingMessage" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ClientPingMessage.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ClientPingMessage" /> class.</summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:Abune.Shared.Message.ClientPingMessage.ClientTimestamp">
            <summary>Gets or sets the client timestamp.</summary>
            <value>The client timestamp.</value>
        </member>
        <member name="M:Abune.Shared.Message.ClientPingMessage.Serialize">
            <summary>Serializes this instance.</summary>
            <returns>Byte serialized instance.</returns>
        </member>
        <member name="T:Abune.Shared.Message.ClientPongMessage">
            <summary>Client pong response message.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ClientPongMessage.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ClientPongMessage" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ClientPongMessage.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ClientPongMessage" /> class.</summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:Abune.Shared.Message.ClientPongMessage.ServerRequestTimestamp">
            <summary>Gets or sets the server request timestamp.</summary>
            <value>The server request timestamp.</value>
        </member>
        <member name="P:Abune.Shared.Message.ClientPongMessage.ClientRequestTimestamp">
            <summary>Gets or sets the client request timestamp.</summary>
            <value>The client request timestamp.</value>
        </member>
        <member name="P:Abune.Shared.Message.ClientPongMessage.ClientResponseTimestamp">
            <summary>Gets or sets the client response timestamp.</summary>
            <value>The client response timestamp.</value>
        </member>
        <member name="M:Abune.Shared.Message.ClientPongMessage.Serialize">
            <summary>Serializes this instance.</summary>
            <returns>Byte serialized instance.</returns>
        </member>
        <member name="T:Abune.Shared.Message.ICanRouteToArea">
            <summary>Implementation can be reached by area id.</summary>
        </member>
        <member name="P:Abune.Shared.Message.ICanRouteToArea.ToAreaId">
            <summary>Gets the area identifier.</summary>
            <value>Area identifier.</value>
        </member>
        <member name="T:Abune.Shared.Message.ICanRouteToObject">
            <summary>Implementation can be reached by object id.</summary>
        </member>
        <member name="P:Abune.Shared.Message.ICanRouteToObject.ToObjectId">
            <summary>Gets the object identifier.</summary>
            <value>Object identifier.</value>
        </member>
        <member name="T:Abune.Shared.Message.FrameType">
            <summary>Enumeration for frame types.</summary>
        </member>
        <member name="F:Abune.Shared.Message.FrameType.Start">
            <summary>First start frame.</summary>
        </member>
        <member name="F:Abune.Shared.Message.FrameType.ClientHello">
            <summary>Client hello frame.</summary>
        </member>
        <member name="F:Abune.Shared.Message.FrameType.ServerHello">
            <summary>Server hello frame.</summary>
        </member>
        <member name="F:Abune.Shared.Message.FrameType.ServerAuthenticationRequest">
            <summary>The server authentication request.</summary>
        </member>
        <member name="F:Abune.Shared.Message.FrameType.ClientAuthenticationResponse">
            <summary>The client authentication response.</summary>
        </member>
        <member name="F:Abune.Shared.Message.FrameType.ClientPing">
            <summary>Client ping request.</summary>
        </member>
        <member name="F:Abune.Shared.Message.FrameType.ServerPong">
            <summary>Server pong response.</summary>
        </member>
        <member name="F:Abune.Shared.Message.FrameType.ServerPing">
            <summary>Server ping request.</summary>
        </member>
        <member name="F:Abune.Shared.Message.FrameType.ClientPong">
            <summary>Client pong response.</summary>
        </member>
        <member name="F:Abune.Shared.Message.FrameType.Message">
            <summary>Containing message with commands.</summary>
        </member>
        <member name="T:Abune.Shared.Message.ObjectCommandEnvelope">
            <summary>Transport envelope for object commands.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ObjectCommandEnvelope.#ctor(System.UInt32,Abune.Shared.Command.BaseCommand,System.UInt64)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ObjectCommandEnvelope" /> class.</summary>
            <param name="senderId">The sender identifier.</param>
            <param name="command">The command.</param>
            <param name="toObjectId">To object identifier.</param>
        </member>
        <member name="M:Abune.Shared.Message.ObjectCommandEnvelope.#ctor(Abune.Shared.Protocol.UdpMessage)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ObjectCommandEnvelope" /> class.</summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">Message is null.</exception>
        </member>
        <member name="P:Abune.Shared.Message.ObjectCommandEnvelope.SenderId">
            <summary>
             Gets the sender identifier.
            </summary>
            <value>The sender identifier.</value>
        </member>
        <member name="P:Abune.Shared.Message.ObjectCommandEnvelope.ToObjectId">
            <summary>Gets the target object identifier.</summary>
            <value>Object identifier.</value>
        </member>
        <member name="P:Abune.Shared.Message.ObjectCommandEnvelope.Command">
            <summary>Gets the command.</summary>
            <value>The command.</value>
        </member>
        <member name="M:Abune.Shared.Message.ObjectCommandEnvelope.Serialize">
            <summary>Serializes this instance.</summary>
            <returns>Byte serialized instance.</returns>
        </member>
        <member name="T:Abune.Shared.Message.ObjectCommandRequestEnvelope">
            <summary>Transport envolope for request envelopes.</summary>
            <seealso cref="T:Abune.Shared.Message.ObjectCommandEnvelope"/>
        </member>
        <member name="M:Abune.Shared.Message.ObjectCommandRequestEnvelope.#ctor(Abune.Shared.Message.ObjectCommandEnvelope)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ObjectCommandRequestEnvelope" /> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Abune.Shared.Message.ObjectCommandRequestEnvelope.Message">
            <summary>
              <para>
            Gets the message.
            </para>
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Abune.Shared.Message.ObjectCommandResponseEnvelope">
            <summary>Transport envolope for response envelopes.</summary>
            <seealso cref="T:Abune.Shared.Message.ObjectCommandEnvelope"/>
        </member>
        <member name="M:Abune.Shared.Message.ObjectCommandResponseEnvelope.#ctor(Abune.Shared.Message.ObjectCommandEnvelope)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ObjectCommandResponseEnvelope" /> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Abune.Shared.Message.ObjectCommandResponseEnvelope.Message">
            <summary>Gets the message.</summary>
            <value>The message.</value>
        </member>
        <member name="T:Abune.Shared.Message.ServerAuthenticationRequest">
            <summary>Server authentication request.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ServerAuthenticationRequest.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ServerAuthenticationRequest" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ServerAuthenticationRequest.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ServerAuthenticationRequest" /> class.</summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:Abune.Shared.Message.ServerAuthenticationRequest.AuthenticationChallenge">
            <summary>Gets or sets the welcome message.</summary>
            <value>The message.</value>
        </member>
        <member name="M:Abune.Shared.Message.ServerAuthenticationRequest.Serialize">
            <summary>Serializes this instance.</summary>
            <returns>Byte serialized instance.</returns>
        </member>
        <member name="T:Abune.Shared.Message.ServerHelloMessage">
            <summary>Server welcome message.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ServerHelloMessage.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ServerHelloMessage" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ServerHelloMessage.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ServerHelloMessage" /> class.</summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:Abune.Shared.Message.ServerHelloMessage.Message">
            <summary>Gets or sets the welcome message.</summary>
            <value>The message.</value>
        </member>
        <member name="P:Abune.Shared.Message.ServerHelloMessage.Version">
            <summary>Gets or sets the server version.</summary>
            <value>The message.</value>
        </member>
        <member name="M:Abune.Shared.Message.ServerHelloMessage.Serialize">
            <summary>Serializes this instance.</summary>
            <returns>Byte serialized instance.</returns>
        </member>
        <member name="T:Abune.Shared.Message.ServerPingMessage">
            <summary>Message for server ping.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ServerPingMessage.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ServerPingMessage" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ServerPingMessage.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ServerPingMessage" /> class.</summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:Abune.Shared.Message.ServerPingMessage.ServerTimestamp">
            <summary>Gets or sets the server timestamp.</summary>
            <value>The server timestamp.</value>
        </member>
        <member name="M:Abune.Shared.Message.ServerPingMessage.Serialize">
            <summary>Serializes this instance.</summary>
            <returns>Byte serialized instance.</returns>
        </member>
        <member name="T:Abune.Shared.Message.ServerPongMessage">
            <summary>Server pong message.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ServerPongMessage.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ServerPongMessage" /> class.</summary>
        </member>
        <member name="M:Abune.Shared.Message.ServerPongMessage.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.ServerPongMessage" /> class.</summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:Abune.Shared.Message.ServerPongMessage.ClientRequestTimestamp">
            <summary>Gets or sets the client request timestamp.</summary>
            <value>The client request timestamp.</value>
        </member>
        <member name="P:Abune.Shared.Message.ServerPongMessage.ClientResponseTimestamp">
            <summary>Gets or sets the client response timestamp.</summary>
            <value>The client response timestamp.</value>
        </member>
        <member name="P:Abune.Shared.Message.ServerPongMessage.ServerTimestamp">
            <summary>Gets or sets the server timestamp.</summary>
            <value>The server timestamp.</value>
        </member>
        <member name="M:Abune.Shared.Message.ServerPongMessage.Serialize">
            <summary>Serializes this instance.</summary>
            <returns>Byte serialized instance.</returns>
        </member>
        <member name="T:Abune.Shared.Message.StartServerMessage">
            <summary>Server start message.</summary>
        </member>
        <member name="M:Abune.Shared.Message.StartServerMessage.#ctor(System.Net.IPEndPoint)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Message.StartServerMessage" /> class.</summary>
            <param name="serverEndpoint">The server endpoint.</param>
        </member>
        <member name="P:Abune.Shared.Message.StartServerMessage.ServerEndpoint">
            <summary>Gets the server endpoint.</summary>
            <value>The server endpoint.</value>
        </member>
        <member name="T:Abune.Shared.Protocol.MessageControlFlags">
            <summary>Control flags for message header.</summary>
        </member>
        <member name="F:Abune.Shared.Protocol.MessageControlFlags.NOOP">
            <summary>
            No Operation - ‭‬0b0000_0000
            followed by [].
            </summary>
        </member>
        <member name="F:Abune.Shared.Protocol.MessageControlFlags.ACK">
            <summary>
            Acknowledge (QoS 1) - 0b0000_0001
            followed by [ACK-MESSAGEID] [...].
            </summary>
        </member>
        <member name="F:Abune.Shared.Protocol.MessageControlFlags.ACK2">
            <summary>
            Acknowledge Response (QoS 2) - 0b0000_0011
             [...] followed by [ACK-ACK-MESSAGEID] [...].
            </summary>
        </member>
        <member name="F:Abune.Shared.Protocol.MessageControlFlags.NACK">
            <summary>
            Negative Acknoledgment (Qos 1, 2) - 0b0000_0100
            [...] followed by [NACK-MESSAGEID] [...].
            </summary>
        </member>
        <member name="F:Abune.Shared.Protocol.MessageControlFlags.REJ">
            <summary>
            Reject / Drop (Qos 1, 2) - 0b0000_1100
            [...] followed by [NACK-MESSAGEID] [...].
            </summary>
        </member>
        <member name="F:Abune.Shared.Protocol.MessageControlFlags.QOS0">
            <summary>
            Quality of service "none" - 0b0000_0000
            [...] followed by [PAYLOAD].
            </summary>
        </member>
        <member name="F:Abune.Shared.Protocol.MessageControlFlags.QOS1">
            <summary>
            Quality of service "at least once" - 0b0001_0000
            [...] followed by [PAYLOAD].
            </summary>
        </member>
        <member name="F:Abune.Shared.Protocol.MessageControlFlags.QOS2">
            <summary>
            Quality of service "exactly once" - 0b0011_0000
            [...] followed by [PAYLOAD].
            </summary>
        </member>
        <member name="F:Abune.Shared.Protocol.MessageControlFlags.COMMAND">
            <summary>
            Message with command - 0b1000_0000
            followed by [...] [PAYLOAD].
            </summary>
        </member>
        <member name="T:Abune.Shared.Protocol.UdpMessage">
            <summary>Udp layer message transporting frames and command messages.</summary>
        </member>
        <member name="M:Abune.Shared.Protocol.UdpMessage.#ctor(System.UInt32,Abune.Shared.Protocol.MessageControlFlags,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Protocol.UdpMessage" /> class.</summary>
            <param name="sequenceId">The sequence identifier.</param>
            <param name="controlFlags">The control flags.</param>
            <param name="commandBody">The command body.</param>
        </member>
        <member name="M:Abune.Shared.Protocol.UdpMessage.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Protocol.UdpMessage" /> class.</summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Abune.Shared.Protocol.UdpMessage.#ctor(System.IO.BinaryReader)">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Protocol.UdpMessage" /> class.</summary>
            <param name="br">The br.</param>
        </member>
        <member name="P:Abune.Shared.Protocol.UdpMessage.SequenceId">
            <summary>Gets or sets the sequence identifier.</summary>
            <value>The sequence identifier.</value>
        </member>
        <member name="P:Abune.Shared.Protocol.UdpMessage.ControlFlags">
            <summary>Gets or sets the control flags.</summary>
            <value>The control flags.</value>
        </member>
        <member name="P:Abune.Shared.Protocol.UdpMessage.CommandBody">
            <summary>Gets or sets the command body.</summary>
            <value>The command body.</value>
        </member>
        <member name="M:Abune.Shared.Protocol.UdpMessage.Deserialize(System.Byte[])">
            <summary>Deserializes the specified buffer.</summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Abune.Shared.Protocol.UdpMessage.Deserialize(System.IO.BinaryReader)">
            <summary>Deserializes the specified br.</summary>
            <param name="br">The br.</param>
            <exception cref="T:System.ArgumentNullException">Binary reader is null.</exception>
        </member>
        <member name="M:Abune.Shared.Protocol.UdpMessage.Serialize">
            <summary>Serializes this instance.</summary>
            <returns>Byte serialized udp message.</returns>
        </member>
        <member name="T:Abune.Shared.Protocol.UdpTransferFrame">
            <summary>Transfer frame udp frame.</summary>
        </member>
        <member name="M:Abune.Shared.Protocol.UdpTransferFrame.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Protocol.UdpTransferFrame" /> class.</summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Abune.Shared.Protocol.UdpTransferFrame.#ctor(Abune.Shared.Message.FrameType,System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Protocol.UdpTransferFrame" /> class.</summary>
            <param name="type">The type.</param>
            <param name="messageBuffer">The message buffer.</param>
            <exception cref="T:System.ArgumentNullException">MessageBuffer is null.</exception>
        </member>
        <member name="P:Abune.Shared.Protocol.UdpTransferFrame.Type">
            <summary>Gets or sets the type.</summary>
            <value>The type.</value>
        </member>
        <member name="P:Abune.Shared.Protocol.UdpTransferFrame.Length">
            <summary>Gets or sets the length.</summary>
            <value>The length.</value>
        </member>
        <member name="P:Abune.Shared.Protocol.UdpTransferFrame.MessageBuffer">
            <summary>Gets or sets the message buffer.</summary>
            <value>The message buffer.</value>
        </member>
        <member name="M:Abune.Shared.Protocol.UdpTransferFrame.Deserialize(System.Byte[])">
            <summary>Deserializes the specified buffer.</summary>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.IO.InternalBufferOverflowException">Invalid message size: {this.Length}.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid control byte: {controlByte}.</exception>
        </member>
        <member name="M:Abune.Shared.Protocol.UdpTransferFrame.Serialize">
            <summary>Serializes this instance.</summary>
            <returns>Byte serialized buffer.</returns>
        </member>
        <member name="T:Abune.Shared.Util.Locator">
            <summary>Implementation to locate areas and objects.</summary>
        </member>
        <member name="F:Abune.Shared.Util.Locator.AREASIZE">
            <summary>  The dimension (size) of one area.</summary>
        </member>
        <member name="F:Abune.Shared.Util.Locator.MAXAREASIZE">
            <summary>The world size.</summary>
        </member>
        <member name="F:Abune.Shared.Util.Locator.MAXPOSITION">
            <summary>  The absolute maximum position an object can have.</summary>
        </member>
        <member name="M:Abune.Shared.Util.Locator.GetAreaIdFromWorldPosition(Abune.Shared.DataType.AVector3)">
            <summary>Gets the area identifier from world position.</summary>
            <param name="worldPosition">The world position.</param>
            <returns>The area identifier.</returns>
        </member>
        <member name="M:Abune.Shared.Util.Locator.GetAreaIdsWithinWorldBoundaries(Abune.Shared.DataType.AVector3,Abune.Shared.DataType.AVector3)">
            <summary>Gets all area identifiers within the given world boundaries.</summary>
            <param name="a">The world position start.</param>
            <param name="b">The world position end.</param>
            <returns>List of area identifiers.</returns>
        </member>
        <member name="M:Abune.Shared.Util.Locator.GetAreaBoundary(System.UInt64,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>Gets the boundary of the area.</summary>
            <param name="areaId">The area identifier.</param>
            <param name="minX">The minimum x boundary.</param>
            <param name="minY">The minimum y boundary.</param>
            <param name="minZ">The minimum z boundary.</param>
            <param name="maxX">The maximum x boundary.</param>
            <param name="maxY">The maximum y boundary.</param>
            <param name="maxZ">The maximum z boundary.</param>
        </member>
        <member name="T:Abune.Shared.Util.ReliableUdpMessaging">
            <summary>Reliable udp messaging supporting QoS 0, 1 and 2.</summary>
        </member>
        <member name="M:Abune.Shared.Util.ReliableUdpMessaging.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Abune.Shared.Util.ReliableUdpMessaging" /> class.</summary>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.MessageReceivedCount">
            <summary>Gets the message received count.</summary>
            <value>The message received count.</value>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.MessageSentCount">
            <summary>Gets the message sent count.</summary>
            <value>The message sent count.</value>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.DeadletterCount">
            <summary>Gets the deadletter count.</summary>
            <value>The deadletter count.</value>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.MessageResentCount">
            <summary>Gets the message resent count.</summary>
            <value>The message resent count.</value>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.MessageUnackedCount">
            <summary>Gets the message unacked count.</summary>
            <value>The message unacked count.</value>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.MTU">
            <summary>Gets or sets the mtu.</summary>
            <value>The mtu.</value>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.RateLimit">
            <summary>Gets or sets the rate limit.</summary>
            <value>The rate limit.</value>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.OnProcessCommandMessage">
            <summary>Gets or sets the callback method to process an incoming message.</summary>
            <value>The callback handler.</value>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.OnSendFrame">
            <summary>Gets or sets the callback method to send a udp frame.</summary>
            <value>The callback handler.</value>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.OnDeadLetter">
            <summary>Gets or sets the callback method for dead lettered messages.</summary>
            <value>The callback handler.</value>
        </member>
        <member name="M:Abune.Shared.Util.ReliableUdpMessaging.ProcessMessageFrame(Abune.Shared.Protocol.UdpTransferFrame)">
            <summary>Processes the message frame.</summary>
            <param name="frame">The frame.</param>
            <exception cref="T:System.ArgumentNullException">Frame is null.</exception>
        </member>
        <member name="M:Abune.Shared.Util.ReliableUdpMessaging.SendCommand(System.UInt32,Abune.Shared.Command.BaseCommand,System.UInt64,Abune.Shared.Protocol.MessageControlFlags)">
            <summary>Sends a command.</summary>
            <param name="senderId">The sender identifier.</param>
            <param name="command">The command.</param>
            <param name="toObjectId">To object identifier.</param>
            <param name="qualityOfService">The quality of service.</param>
        </member>
        <member name="M:Abune.Shared.Util.ReliableUdpMessaging.SendCommandEnvelope(Abune.Shared.Message.ObjectCommandEnvelope,Abune.Shared.Protocol.MessageControlFlags)">
            <summary>Sends a command envelope.</summary>
            <param name="commandEnvelope">The command envelope.</param>
            <param name="qualityOfService">The quality of service.</param>
            <exception cref="T:System.ArgumentNullException">commandEnvelope is null.</exception>
        </member>
        <member name="M:Abune.Shared.Util.ReliableUdpMessaging.GetMessageWaitTime">
            <summary>Gets the message wait time.</summary>
            <returns>The time to wait.</returns>
        </member>
        <member name="M:Abune.Shared.Util.ReliableUdpMessaging.IsSendRateExceeded">
            <summary>Determines whether [is send rate exceeded].</summary>
            <returns>
              <c>true</c> if [is send rate exceeded]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Abune.Shared.Util.ReliableUdpMessaging.SynchronizeMessages">
            <summary>Synchronizes all pending messages between local and remote.</summary>
            <returns>
            Suggested wait time. For example when send rate is exceeded.
            </returns>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.MessageEntry.LastSendTimeStamp">
            <summary>Gets or sets the last send time stamp.</summary>
            <value>The last send time stamp.</value>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.MessageEntry.SendCount">
            <summary>Gets or sets the send count.</summary>
            <value>The send count.</value>
        </member>
        <member name="P:Abune.Shared.Util.ReliableUdpMessaging.MessageEntry.Message">
            <summary>Gets or sets the message.</summary>
            <value>The message.</value>
        </member>
        <member name="T:Assets.Abune.Client.Unity.Shared.Util.Base64Url">
            <summary>
            Helper class to support base 64 url encoding.
            </summary>
        </member>
        <member name="M:Assets.Abune.Client.Unity.Shared.Util.Base64Url.Encode(System.Byte[])">
            <summary>
            Transforms byte array to a base 64 url encoded string.
            </summary>
            <param name="data">The input data.</param>
            <returns>Base 64 url encoded data.</returns>
        </member>
        <member name="M:Assets.Abune.Client.Unity.Shared.Util.Base64Url.Decode(System.String)">
            <summary>
            Transforms base 64 url encoded string to byte array.
            </summary>
            <param name="data">The base 64 url encoded data.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="T:Assets.Abune.Client.Unity.Shared.Util.Contract.ITokenProvider">
            <summary>
            Interface for token provider.
            </summary>
        </member>
        <member name="M:Assets.Abune.Client.Unity.Shared.Util.Contract.ITokenProvider.CreateJWTToken(System.String,System.DateTime)">
            <summary>Creates the JWT token.</summary>
            <param name="authenticationChallenge">The authentication challenge.</param>
            <param name="expires">The expires.</param>
            <returns>Json web token.</returns>
        </member>
    </members>
</doc>
